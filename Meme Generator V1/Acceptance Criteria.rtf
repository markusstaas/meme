{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 PROJECT SPECIFICATION\
MemeMe 1.0: Meme Editor\
\
General\
\
CRITERIA\
MEETS SPECIFICATIONS\
Code uses control flow effectively.\
\
Control statements (for, while, if, else, switch) are used appropriately.\
\
Code is effectively abstracted.\
\
Potentially repetitive blocks of code are effectively abstracted into reusable methods.\
\
Code inputs and outputs are appropriate.\
\
Arguments and return values are procedure-appropriate.\
\
Code is readable by others.\
\
Code is easy to understand. Any code that may be hard to follow is commented effectively.\
\
App content is properly displayed in both portrait and landscape mode.\
\
User interface elements, images, and generated memes are properly displayed and function as expected in portrait as well as landscape orientations.\
\
Code follows appropriate style.\
\
Code adheres to Swift naming and style conventions.\
\
Meme Editor\
\
CRITERIA\
MEETS SPECIFICATIONS\
Buttons on the MemeEditor toolbar are correct.\
\
The Meme Editor view has a toolbar with two buttons: one that allows user to open the Photo Album to select an image, one that launches the camera.\
\
The Camera button is enabled correctly.\
\
The app displays the camera when the Camera button is pressed on a phone.\
\
The Camera button is disabled correctly.\
\
The Camera button is disabled when app is run on devices without a camera, such as the simulator.\
\
Images are displayed properly.\
\
The chosen image from the camera or the photo album is displayed and scaled properly with AspectFit to fit the device screen.\
\
Code follows appropriate style.\
\
The app displays the image picker when the Album button is pressed.\
\
The necessary text fields are provided.\
\
Text fields are provided for top and bottom text.\
\
Font in text fields is easy to read.\
\
The font and style used to display the meme text is easy to read: bold, all caps, white with a black outline, and shrink to fit.\
\
The text fields are properly shown while typing.\
\
The text field that the user is currently editing remains fully visible with the keyboard on screen. For the bottom text field this is achieved by moving the entire view up to keep the text field on screen, then back after the keyboard is dismissed.\
\
There is a social share button.\
\
The app has a social share button that uses the \'93Action\'94 icon built into iOS.\
\
The share button works as intended.\
\
The share button launches the Activity View.\
\
When the share action is complete the meme is saved.\
\
The meme is saved before the Activity View Controller is dismissed.\
\
A Meme model groups the properties of a single meme.\
\
The Meme model is a struct that includes:\
\
two strings representing the top and bottom text\
the original image\
a memed image combining image and text\
\
----------\
Have your app use the Impact font by default.\
Let the user choose between different fonts for the meme text.\
Allow the user to crop the image.\
Use your creativity to improve the UI so your app displays exceptional graphic design.}